BasedOnStyle: LLVM

## Indentation and line width
UseTab: Never
IndentWidth: 4
PPIndentWidth: 2
ContinuationIndentWidth: 4

ColumnLimit: 110

MaxEmptyLinesToKeep: 2
OverEmptyLines: 1
InsertNewlineAtEOF: true
KeepEmptyLinesAtTheStartOfBlocks: false

IndentCaseLabels: true
IndentCaseBlocks: false
IndentGotoLabels: false
IndentPPDirectives: AfterHash

## Braces
InsertBraces: True

BraceWrapping:
  AfterCaseLabel: false
  AfterControlStatement: Never
  AfterEnum: false
  AfterExternBlock: false
  AfterFunction: false
  AfterStruct: false
  AfterUnion: false
  BeforeElse: false
  BeforeWhile: false
  IndentBraces: false
  SplitEmptyFunction: false
  SplitEmptyRecord: false

## Alignment
AlignConsecutiveAssignments:
  Enabled: false
  AcrossEmptyLines: false
  AcrossComments: false
  AlignCompound: false
  PadOperators: false
AlignConsecutiveBitFields:
  Enabled: false
  AcrossEmptyLines: false
  AcrossComments: false
AlignConsecutiveDeclarations:
  Enabled: false
  AcrossEmptyLines: false
  AcrossComments: false
  # AlignFunctionDeclarations: false
AlignConsecutiveMacros:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: false
AlignTrailingComments:
  Kind: Always
  OverEmptyLines: 0

AlignArrayOfStructures: Right
AlignEscapedNewlines: Left

## Compressing short constructs
AllowShortCaseLabelsOnASingleLine: false
AllowShortEnumsOnASingleLine: false
AllowShortFunctionsOnASingleLine: false
AllowShortIfStatementsOnASingleLine: false
AllowShortLoopsOnASingleLine: false

## Breaking long constructs

# parameters that don't fit on one line
AlignAfterOpenBracket: BlockIndent

BinPackArguments: false
AllowAllArgumentsOnNextLine: false

BinPackParameters: false
AllowAllParametersOfDeclarationOnNextLine: false

# Strings that don't fit on one line
AlwaysBreakBeforeMultilineStrings: false

# Expressions that don't fit on one line:
BreakBeforeBinaryOperators: NonAssignment
BreakBeforeTernaryOperators: true

SortIncludes: Never
IncludeBlocks: Preserve
IncludeIsMainRegex: ""
IncludeCategories:
  - { Regex: "<.*>", Priority: -1, CaseSensitive: true }
  - { Regex: '".*"', Priority: -2, CaseSensitive: true }

# # Includes
# SortIncludes:    CaseSensitive
# IncludeBlocks:   Regroup
# IncludeIsMainRegex: '(_[a-zA-Z0-9_]+)?$'
# IncludeCategories:
#   # standard headers
#   - Regex:  '^<std'
#     Priority: 10
#   # Other <> angle bracket includes
#   - Regex:  '^<.*>$'
#     Priority: 20
#   # quote includes
#   - Regex:  '^".*"$'
#     Priority: 30

## MISC
QualifierAlignment: Custom
QualifierOrder: ["static", "inline", "volatile", "restrict", "const", "type"]

#BreakAfterAttributes: Always   # Requires newer clang-format version
SpaceAfterCStyleCast: true
